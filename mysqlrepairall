#!/usr/bin/env bash

# This tool is designed to be run in a screen. All detailed output is logged in
# /var/log/mysql_db_repair.log

# Created by Hummdis (https://hummdis.com).
# This work is licensed under the Creative Commons Attribution-ShareAlike
# 4.0 International License. To view a copy of this license,
# visit http://creativecommons.org/licenses/by-sa/4.0/.

## RUNNING AND INSTALLATION
#
# See the README at:
# https://github.com/Hummdis/mysqlrepairall
#
##

# Change from 'false' to 'true' to enable auto-updates. Default: false
AUTO_UPDATE='false'

# What's the default directory for MySQL/MariaDB?
SQL_DIR=/var/lib/mysql

#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#
# END OF USER-DEFINED VARIABLES -- DON'T EDIT UNLESS YOU KNOW WHAT YOU'RE DOING
#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#+#


### VARIABLES ###
VERSION=2.2.0
OPT=""
LOG='/var/log/mysql_db_repair.log'
TIMESTAMP=$(date +%Y-%m-%d_%H%M)
BU_DIR='/root/dbbackups'
RUN_DIR='/usr/sbin/'
NEW_VER=$(cat /tmp/mysqlrepairall | grep -m 1 "VERSION=" | cut -d = -f 2)
BU_PATH=${BU_DIR}/${TIMESTAMP}
GITHUB="https://raw.githubusercontent.com/Hummdis/mysqlrepairall/master/mysqlrepairall"
TEE="tee /dev/fd/3"

### BINARY VARIABLES ###
SKIP_BACKUP='false'
SKIP_LIVE='false'
SKIP_OFFLINE='false'
SKIP_OPTIMIZE='false'
SKIP_MYSQL='false'
BACKUP_DIR='false'

### COLORS ###
NC=$(echo -en '\033[0m')       # Reset to normal TTY
RED=$(echo -en '\033[01;31m')  # Bold Red
GRN=$(echo -en '\033[01;32m')  # Bold Green
YEL=$(echo -en '\033[01;33m')  # Bold Yellow
BLU=$(echo -en '\033[01;94m')  # Bold Light Blue
CYA=$(echo -en '\033[01;36m')  # Bold Cyan
MAG=$(echo -en '\033[01;35m')  # Bold Magenta
WHT=$(echo -en '\033[01;37m')  # Bold White
LTB=$(echo -en '\033[94m')     # Light Blue
BLB=$(echo -en '\e[44m')       # Blue Background
ULNE=$(echo -en '\033[4m')     # Underline
OVW=$(echo -en '\033[0K\r')    # Overwrite existing line

### FUNCTIONS ###
stop_mysql() {
	echo -e "${BLU}Starting database service shutdown process...${NC}" | $TEE
	secs=$((30))
	while [ $secs -gt 0 ]; do
		echo -en "${RED}Database service stopping in $secs...${OVW}${NC}" | $TEE
		sleep 1
		: $((secs--))
	done
	
	# We're going to tell chkservd to not monitor the MySQL process as well so
	# it's not restarted during the repair process.
	echo -en "${OVW}\tRemoving service from chkservd monitoring..." | $TEE
	sed -i 's/mysql:1/mysql:0/g' /etc/chkserv.d/chkservd.conf
	/scripts/restartsrv chkservd
	echo "${GRN}DONE!${NC}"  | $TEE

	echo -e "\tStopping database service. Current time: $(date +%c)" | $TEE
	/scripts/restartsrv_mysql --stop
}

start_mysql() {
	echo -e "${BLU}\nStarting database service startup process...${NC}" | $TEE
	echo -en "\tRestarting database service..." | $TEE
	/scripts/restartsrv_mysql --start
	echo "${GRN}DONE!${NC}"  | $TEE
	
	# Enable Chkservd's monitoring again.
	echo -en "\tAdding service monitoring back to chkservd..." | $TEE
	sed -i 's/mysql:0/mysql:1/g' /etc/chkserv.d/chkservd.conf
	/scripts/restartsrv chkservd
	echo "${GRN}DONE!${NC}"  | $TEE
}

check_backup_dir() {
	# Make sure the backup directory exists, if not, create it.
	# Abort if it's not a directory.
	if [[ ! -e $BU_DIR ]]; then
		mkdir $BU_DIR
	elif [[ ! -d $BU_DIR ]]; then
		echo -e "${RED}${BU_DIR} exists but is not a directory.${NC}" | $TEE
		echo -e "${RED}ABORTING.${NC}" | $TEE
		exit 1
	fi
}

rotate_logs() {
	# Since the logs can be quite large, especially for servers with a lot of
	# databases, rotate the logs with each run. Delete any older than 7 days.
	if [[ -e $LOG ]]; then
		gzip -S "_${TIMESTAMP}.gz" $LOG
	fi
	
	# Keep only the 7 newest files.
	ls -1t ${BU_DIR}/${LOG}*.gz 2>&1 | (i=0; while read f; do
		if [ $i -lt 7 ]; then
			((i++))
			continue
		else
			rm -f "$f"
		fi
	done)
}

run_backup() {
	echo -e "\n${BLU}Performing backup operations...${NC}" | $TEE
	
	if [[ $SKIP_BACKUP = 'true' ]]; then
		echo -e "${YEL}\tSkipping database backup process.${NC}" | $TEE
	
	elif [[ $SKIP_MYSQL = 'true' && $BACKUP_DIR = 'true' ]]; then
		check_backup_dir
		
		# Backup the whole folder to a file.
		echo -en "\n\tBacking up folder ${SQL_DIR} to ${BU_PATH}/ ..." | $TEE
		
		# MySQL is assumed to be not running. Backup the $SQL_DIR directory.
		mkdir -p ${BU_PATH}
		tar -czvf ${BU_PATH}/mysql_dir_${TIMESTAMP}.tar.gz ${SQL_DIR}
		
		echo -e "${GRN}DONE!${NC}" | $TEE
	
	else
		# Since the database service should be running, use mysqldump.
		check_backup_dir

		# After commmunication with Zeb W., it would be best to not dump the SQL
		# to a single file but to rather dump each database separately.  This
		# would be perferred by DB Admins.
		mkdir -p ${BU_DIR}/${TIMESTAMP}
		LIST="${BU_DIR}/${TIMESTAMP}/01_LIST"
		
		# Run the normal MySQL dump process.
		echo -e "\tBacking up databases to ${BU_DIR}/${TIMESTAMP}/" | $TEE
		echo -e "\tDB Backup list located at ${LIST}" | $TEE
		touch $LIST
		for DB in $(mysql -e 'show databases' | \
grep -v "Database\|information_schema" | awk '{print $1}'); do
			mysqldump --add-drop-table ${DB} > ${BU_DIR}/${TIMESTAMP}/$DB.sql \
&& echo ${DB} >> ${LIST}
		done

		echo -e "\t${GRN}Individual database backups complete.${NC}" | $TEE		
	fi
}

check_live() {
	echo -e "\n${BLU}Performing live databases operations...${NC}" | $TEE

	if [[ $SKIP_LIVE = 'true' ]]; then
		echo -e "\t${YEL}Skipping Live repair process.${NC}" | $TEE
	else
		# Perform MySQL check. This is a simple check on the databases and can
		# be run with MySQL running.
		echo -en "\tPerforming live database repair..." | $TEE
		mysqlcheck --repair --extended --all-databases
		echo "${GRN}DONE!${NC}"  | $TEE
		
		# This seems to hang on some systems. Allow this to be skipped.
		if [[ $SKIP_OPTIMIZE = 'true' ]]; then
			echo -e "\t${YEL}Skipping live optimization process.${NC}" | $TEE
		else
			echo -en "\tPerforming database optimizations..." | $TEE
			mysqlcheck --optimize --all-databases
			echo -e "${GRN}DONE!${NC}"  | $TEE
		fi
	fi
}

check_offline() {
	echo -e "\nStarting offline databases process..." | $TEE

	if [[ $SKIP_OFFLINE = 'true' ]]; then
		echo -e "\t${YEL}Skipping offline repair process.${NC}" | $TEE
	
	else
		# Perform a MyISAM check on the tables and repair any issues found.
		# The database service must be stopped.  This is to prevent database
		# corruption and because MyISAM needs an exclusive lock to work with a
		# table that needs to be repaired.
		if [[ $SKIP_MYSQL = 'true' ]]; then
			echo -e "\t${YEL}Skipping shutdown process.${NC}" | $TEE
		else
			stop_mysql
		fi

		# Perform a MyISAM check for all MyISAM databases.  This will also
		# optimize the database by default.
		echo -en "\tPerforming checks & repairs (step 1/2)..." | $TEE
		for i in $(find /var/lib/mysql/ -name '*.MYI')
		do
			myisamchk --extend-check --recover --wait --force --sort-index $i 
		done
		echo "${GRN}DONE!${NC}"  | $TEE
		
		# This does the same thing as the above does, but addresses the
		# "myisamchk: error: 140 when opening MyISAM-table" errors by trimming
		# the suffix.
		echo -en "\tPerforming checks & repairs (step 2/2)..." | $TEE
		for i in $(find /var/lib/mysql/ -name '*.MYI' | sed 's/.\{4\}$//')
		do
			myisamchk --extend-check --recover --wait --force --sort-index $i
		done
		echo -e "${GRN}DONE!${NC}"  | $TEE
		
		if [[ $SKIP_MYSQL = 'true' ]]; then
			echo -e "\n\t${YEL}Skipping restart process.${NC}" | $TEE
		else
			start_mysql
		fi
	fi
}

update_check() {
	# This will return the following numbers for the two arguments passed.
    # 0 if $1 = $2
    # 1 if $1 > $2
    # 2 if $1 < $2

    if [[ $1 == $2 ]]; then
        return 0
    fi

    local IFS=.
    local i ver1=($1) ver2=($2)
    # Fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done

    for ((i=0; i<${#ver1[@]}; i++)); do
        if [[ -z ${ver2[i]} ]]; then
            # Fill empty fields in ver2 with zeros
            ver2[i]=0
        fi

        if ((10#${ver1[i]} > 10#${ver2[i]})); then
            return 1
        fi

        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 2
        fi
    done

    return 0
}

run_job() {
	# We're going to make sure everything is logged.
	# To print statements to the user, which will also go to STDOUT and STDERR,
	# pipe output to "tee /dev/fd/3". Otherwise, it only goes the log.
	rotate_logs
	exec 3>&1 1>>${LOG} 2>&1

	echo -e "\n\n${BLB}MySQL/MariaDB Repair All v${VERSION}${NC}\n\n" | $TEE
	
	# Perform update check.
    wget -O /tmp/mysqlrepairall -q ${GITHUB}
    update_check ${NEW_VER} ${VERSION}
	
    case $? in
        0)  # No update available. Do nothing.
            ;;
        1)  # If Auto Update is enabled, update. Otherwise, report a new
			#version, but do nothing else.
            if [[ $AUTO_UPDATE == 'true' ]]; then
                echo -e "${MAG}Update Check - Auto Update enabled.${NC}" | $TEE
				echo -e "${MAG}Updating to v${NEW_VER}${NC}" | $TEE
                wget -O $RUN_DIR/mysqlrepairall ${GITHUB}
                chmod +x $RUN_DIR/mysqlrepairall
            else
                echo -e "${CYA}Version v${NEW_VER} available.${NC}" | $TEE
            fi
            ;;
        2)  # The public version is older than the current version.
            echo -e "${MAG}Update Check - Running version ${VERSION}" | $TEE
			echo -e "Published version is ${NEW_VER}.${NC}" | $TEE
            ;;
        *)  # All other values are invalid. Report, but don't cause the program
			# to abort.
            echo -e "${RED}Running MySQL Repair All update check" | $TEE
			echo -e "returned an invalid code ($?). Skipping.${NC}" | $TEE
            ;;
    esac
	
	
	echo -e "\nRUNNING NEW DATABASE REPAIR PROCESS" | $TEE
	echo -e "${LTB}Start time: $(date +%c)${NC}" | $TEE
	
	run_backup
	check_live
	check_offline

	# Report completion.
	echo -e "\n${GRN}CHECKS AND REPAIR COMPLETE.${NC}\n" | $TEE
	echo -e "${LTB}Finish time: $(date +%c)${NC}" | $TEE
	echo -e "\nThe full log can be viewed at: $LOG\n" | $TEE
}

usage() {
	echo "
Usage: mysqlrepairall [ OPTIONS ]

[ OPTIONS ]
	-b	,	--skip-backup
		Skip running the backup process. Use only if you've performed a manual
		export of the database(s) yourself.

	-l	,	--skip-live
		Skip running the live repair process.

	-o	,	--skip-offline	
		Skip running the offline repair process.
	
	-O	,	--skip-optimize
		Skip the InnoDB optimization process.  Useful if it seems to hang up
		some systems.
	
	-m	,	--skip-mysql
		Skip the process to try to stop MySQL/MariaDB. This assumes that it's 
		already stopped. This is useful for when you're performing a repair on
		on the database files.
		This option also performes the backup differently by creating a Tarball
		of the whole /var/lib/mysql directory in the running users' home
		directory, unless the -b option has been passed.

	-h	,	--help
		Display this help text.
"
}

while (( "$#" )); do
	case "$1" in	
		-b | --skip-backup) # Skip Backup process.
			SKIP_BACKUP='true'
			shift
			;;
		-l | --skip-live) # Skip live repair.
			SKIP_LIVE='true'
			shift
			;;
		-o | --skip-offline) # Skip offline repair.
			SKIP_OFFLINE='true'
			shift
			;;
		-O | --skip-optimize) # Skip DB optimize process.
			SKIP_OPTIMIZE='true'
			shift
			;;
		-m | --skip-mysql) # Skip MySQL check
			SKIP_MYSQL='true'
			SKIP_LIVE='true'
			BACKUP_DIR='true'
			shift
			;;
		-h | --help) # Print help/usage text.
			usage
			exit 0
			;;
		--) # End argument parsing
			shift
			break
			;;
		*) # Unknown argument passed.
			echo "${RED}Unknown argument $1.${NC}" >&2
			echo "${RED}Run -h or --help for usage and options.${NC}" >&2
			exit 2
			;;
	esac
done

# Make sure we're running as Root.
if [ "$EUID" -ne 0 ]; then
	echo "${RED}Please run as Root.${NC}"
	echo "Exiting."
    exit 1
fi

# All args processed. Run the task.
run_job

exit 0
